
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00000d40  00000db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001985  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fd9  00000000  00000000  000029c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b05  00000000  00000000  0000399e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  000044a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000726  00000000  00000000  000046b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b8  00000000  00000000  00004dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00005592  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 e4       	ldi	r30, 0x40	; 64
  c0:	fd e0       	ldi	r31, 0x0D	; 13
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 3c       	cpi	r26, 0xC0	; 192
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  d2:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <delay_1_s>:
; Delay 1 second
;==============================================================================
	.global delay_1_s
	delay_1_s: 

    LDI R24, 250
  da:	8a ef       	ldi	r24, 0xFA	; 250
    RCALL delay_ms
  dc:	1e d0       	rcall	.+60     	; 0x11a <delay_ms>
    LDI R24, 250
  de:	8a ef       	ldi	r24, 0xFA	; 250
    RCALL delay_ms
  e0:	1c d0       	rcall	.+56     	; 0x11a <delay_ms>
    LDI R24, 250
  e2:	8a ef       	ldi	r24, 0xFA	; 250
    RCALL delay_ms
  e4:	1a d0       	rcall	.+52     	; 0x11a <delay_ms>
    LDI R24, 250
  e6:	8a ef       	ldi	r24, 0xFA	; 250
    RCALL delay_ms
  e8:	18 d0       	rcall	.+48     	; 0x11a <delay_ms>
    RET
  ea:	08 95       	ret

000000ec <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
  f8:	08 95       	ret

000000fa <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 112:	8a 95       	dec	r24
	CPI R24, 0			; if there are more loops 
 114:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 116:	89 f7       	brne	.-30     	; 0xfa <delay_micros>
	RET
 118:	08 95       	ret

0000011a <delay_ms>:
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
.global delay_ms
delay_ms:
	MOV R18, R24
 11a:	28 2f       	mov	r18, r24

0000011c <loop_dms>:
loop_dms:
	LDI R24, 250
 11c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 11e:	ed df       	rcall	.-38     	; 0xfa <delay_micros>
	LDI R24, 250
 120:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 122:	eb df       	rcall	.-42     	; 0xfa <delay_micros>
	LDI R24, 250
 124:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 126:	e9 df       	rcall	.-46     	; 0xfa <delay_micros>
	LDI R24, 250
 128:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 12a:	e7 df       	rcall	.-50     	; 0xfa <delay_micros>
	DEC R18
 12c:	2a 95       	dec	r18
	CPI R18, 0			; if there are more loops?
 12e:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 130:	a9 f7       	brne	.-22     	; 0x11c <loop_dms>
 132:	08 95       	ret

00000134 <play_guess_nr>:
 *
 * parameter:
 *	rnd_nr: random number (to be guessed)
 */
void play_guess_nr(uint16_t rnd_nr)
{
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	61 97       	sbiw	r28, 0x11	; 17
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	7c 01       	movw	r14, r24
	uint16_t nr_of_guesses = 0;
	// show initial message, before game starts.
	output_msg("Can you guess", "the number?", 3);
 152:	43 e0       	ldi	r20, 0x03	; 3
 154:	64 e0       	ldi	r22, 0x04	; 4
 156:	71 e0       	ldi	r23, 0x01	; 1
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 ac 01 	call	0x358	; 0x358 <output_msg>
 * parameter:
 *	rnd_nr: random number (to be guessed)
 */
void play_guess_nr(uint16_t rnd_nr)
{
	uint16_t nr_of_guesses = 0;
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	10 e0       	ldi	r17, 0x00	; 0
{
	uint16_t input_length;
	uint16_t guessed_nr;
	while (1) {
		
		input_length = input_int("Enter number:", &guessed_nr);  //UPPGIFT: ändra koden så att 'input_int()' anropas, returvärdet ska lagras i 'input_length', 'guessed_nr' ska modifieras av 'input_int()'.
 164:	be 01       	movw	r22, r28
 166:	6f 5f       	subi	r22, 0xFF	; 255
 168:	7f 4f       	sbci	r23, 0xFF	; 255
 16a:	8e e1       	ldi	r24, 0x1E	; 30
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 29 01 	call	0x252	; 0x252 <input_int>
		// if the user entered a number, and if it was between 1 and 100...
		if (input_length > 0 && guessed_nr >= 1 && guessed_nr <= 100) {
 172:	88 23       	and	r24, r24
 174:	71 f0       	breq	.+28     	; 0x192 <play_guess_nr+0x5e>
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	9a 81       	ldd	r25, Y+2	; 0x02
 17a:	9c 01       	movw	r18, r24
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	31 09       	sbc	r19, r1
 180:	24 36       	cpi	r18, 0x64	; 100
 182:	31 05       	cpc	r19, r1
 184:	30 f4       	brcc	.+12     	; 0x192 <play_guess_nr+0x5e>
	
	// let the user guess a number
	guessed_nr = get_nr();
	// keep track of number of guesses
		//UPPGIFT: öka innehållet i variabeln som 'p_nr_of_guesses' pekar på.
		*p_nr_of_guesses +=1;  
 186:	0f 5f       	subi	r16, 0xFF	; 255
 188:	1f 4f       	sbci	r17, 0xFF	; 255
	// if the guessed number was the correct number...
	if (guessed_nr == rnd_nr) {
 18a:	e8 16       	cp	r14, r24
 18c:	f9 06       	cpc	r15, r25
 18e:	69 f5       	brne	.+90     	; 0x1ea <play_guess_nr+0xb6>
 190:	08 c0       	rjmp	.+16     	; 0x1a2 <play_guess_nr+0x6e>
		if (input_length > 0 && guessed_nr >= 1 && guessed_nr <= 100) {
			// ...return that number!
			return guessed_nr;
		} else {
			// show error/info message!
			output_msg("Enter a number", "between 1-100!", 1);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	6c e2       	ldi	r22, 0x2C	; 44
 196:	71 e0       	ldi	r23, 0x01	; 1
 198:	8b e3       	ldi	r24, 0x3B	; 59
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 ac 01 	call	0x358	; 0x358 <output_msg>
 1a0:	e1 cf       	rjmp	.-62     	; 0x164 <play_guess_nr+0x30>
	// keep track of number of guesses
		//UPPGIFT: öka innehållet i variabeln som 'p_nr_of_guesses' pekar på.
		*p_nr_of_guesses +=1;  
	// if the guessed number was the correct number...
	if (guessed_nr == rnd_nr) {
		output_msg("Correct number!", "", 1);
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	6a e3       	ldi	r22, 0x3A	; 58
 1a6:	71 e0       	ldi	r23, 0x01	; 1
 1a8:	8a e4       	ldi	r24, 0x4A	; 74
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 ac 01 	call	0x358	; 0x358 <output_msg>
 */
static void show_result(uint16_t nr_of_guesses)
{
	char result[17];
	// show result
	sprintf(result, "Guesses: %u", nr_of_guesses);
 1b0:	1f 93       	push	r17
 1b2:	0f 93       	push	r16
 1b4:	8a e5       	ldi	r24, 0x5A	; 90
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	9f 93       	push	r25
 1ba:	8f 93       	push	r24
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	7c 01       	movw	r14, r24
 1c2:	9f 93       	push	r25
 1c4:	8f 93       	push	r24
 1c6:	0e 94 92 03 	call	0x724	; 0x724 <sprintf>
	output_msg(result, "", 3);
 1ca:	43 e0       	ldi	r20, 0x03	; 3
 1cc:	6a e3       	ldi	r22, 0x3A	; 58
 1ce:	71 e0       	ldi	r23, 0x01	; 1
 1d0:	c7 01       	movw	r24, r14
 1d2:	0e 94 ac 01 	call	0x358	; 0x358 <output_msg>
	if (nr_of_guesses <= 7) {
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	08 30       	cpi	r16, 0x08	; 8
 1e4:	11 05       	cpc	r17, r1
 1e6:	e0 f4       	brcc	.+56     	; 0x220 <play_guess_nr+0xec>
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <play_guess_nr+0xdc>
		*p_nr_of_guesses +=1;  
	// if the guessed number was the correct number...
	if (guessed_nr == rnd_nr) {
		output_msg("Correct number!", "", 1);
		return 0;	// return 0 for "game over!"
	} else if (guessed_nr < rnd_nr) { // number too low?
 1ea:	8e 15       	cp	r24, r14
 1ec:	9f 05       	cpc	r25, r15
 1ee:	40 f4       	brcc	.+16     	; 0x200 <play_guess_nr+0xcc>
		output_msg("Too low!", "", 1);
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	6a e3       	ldi	r22, 0x3A	; 58
 1f4:	71 e0       	ldi	r23, 0x01	; 1
 1f6:	86 e6       	ldi	r24, 0x66	; 102
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 ac 01 	call	0x358	; 0x358 <output_msg>
 1fe:	b2 cf       	rjmp	.-156    	; 0x164 <play_guess_nr+0x30>
	} else { // number too high?
		output_msg("Too high!", "", 1);
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	6a e3       	ldi	r22, 0x3A	; 58
 204:	71 e0       	ldi	r23, 0x01	; 1
 206:	8f e6       	ldi	r24, 0x6F	; 111
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 ac 01 	call	0x358	; 0x358 <output_msg>
 20e:	aa cf       	rjmp	.-172    	; 0x164 <play_guess_nr+0x30>
	char result[17];
	// show result
	sprintf(result, "Guesses: %u", nr_of_guesses);
	output_msg(result, "", 3);
	if (nr_of_guesses <= 7) {
		output_msg("Good job!", "", 3);
 210:	43 e0       	ldi	r20, 0x03	; 3
 212:	6a e3       	ldi	r22, 0x3A	; 58
 214:	71 e0       	ldi	r23, 0x01	; 1
 216:	89 e7       	ldi	r24, 0x79	; 121
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 ac 01 	call	0x358	; 0x358 <output_msg>
 21e:	07 c0       	rjmp	.+14     	; 0x22e <play_guess_nr+0xfa>
	} else {
		output_msg("Better luck", "next time...", 3);
 220:	43 e0       	ldi	r20, 0x03	; 3
 222:	63 e8       	ldi	r22, 0x83	; 131
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	80 e9       	ldi	r24, 0x90	; 144
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 ac 01 	call	0x358	; 0x358 <output_msg>
	output_msg("Can you guess", "the number?", 3);
	// play game until the correct number is guessed!
	while (playing_game(rnd_nr, &nr_of_guesses));
	// show result!
	show_result(nr_of_guesses);
 22e:	61 96       	adiw	r28, 0x11	; 17
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	08 95       	ret

00000248 <hmi_init>:
 *	- init numeric keyboard
 *	- init LCD
 */
void hmi_init(void)
{
	numkey_init();
 248:	0e 94 cd 01 	call	0x39a	; 0x39a <numkey_init>
	lcd_init();
 24c:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_init>
 250:	08 95       	ret

00000252 <input_int>:
 *
 * return:
 *	number of digits (0-3)
 */
uint8_t input_int(char *p_msg, uint16_t *p_int_nr)
{
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	00 d0       	rcall	.+0      	; 0x260 <input_int+0xe>
 260:	00 d0       	rcall	.+0      	; 0x262 <input_int+0x10>
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	8c 01       	movw	r16, r24
 268:	7b 01       	movw	r14, r22
	uint8_t length = 0;
	const uint8_t max_length = 3;
	char numbers[max_length + 1];		// UPPGIFT: Varför måste man dimensionera arrayen för ett extra tecken? Vi måste ge plats till '\0' då det är en string vi har att göra med.
	uint8_t key;
	
	lcd_clear();
 26a:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>
	lcd_write_str(p_msg);
 26e:	c8 01       	movw	r24, r16
 270:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_write_str>
	lcd_set_cursor_mode(CURSOR_BLINK);
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 30 02 	call	0x460	; 0x460 <lcd_set_cursor_mode>
	lcd_set_cursor_pos(1, 0);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_set_cursor_pos>
 * return:
 *	number of digits (0-3)
 */
uint8_t input_int(char *p_msg, uint16_t *p_int_nr)
{
	uint8_t length = 0;
 282:	00 e0       	ldi	r16, 0x00	; 0
	lcd_set_cursor_pos(1, 0);
	while (1) 
	{
		do 
		{								// read keyboard....
			key = numkey_read();
 284:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <numkey_read>
 288:	18 2f       	mov	r17, r24
		} 
		while (key == NO_KEY);			// ...until a key is pressed!
 28a:	88 23       	and	r24, r24
 28c:	d9 f3       	breq	.-10     	; 0x284 <input_int+0x32>
		
		if (key == '#')
 28e:	83 32       	cpi	r24, 0x23	; 35
 290:	29 f1       	breq	.+74     	; 0x2dc <input_int+0x8a>
		{					// confirmation of the number?
			break;
		} 
		else if (key == '*') 
 292:	8a 32       	cpi	r24, 0x2A	; 42
 294:	81 f4       	brne	.+32     	; 0x2b6 <input_int+0x64>
		{			
			// erase digit?
			if (length > 0) 
 296:	00 23       	and	r16, r16
 298:	e1 f0       	breq	.+56     	; 0x2d2 <input_int+0x80>
			{
			//UPPGIFT: skriv kod så att tecknet suddas från displayen!
			length--;
 29a:	01 50       	subi	r16, 0x01	; 1
			lcd_write(INSTRUCTION,0x10);	//Flytta pekare ett steg åt vänster
 29c:	60 e1       	ldi	r22, 0x10	; 16
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
			lcd_write(DATA,' ');			//Rensa nuvarande position
 2a4:	60 e2       	ldi	r22, 0x20	; 32
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
			lcd_write(INSTRUCTION,0x10);	//Flytta pekare ett steg åt vänster
 2ac:	60 e1       	ldi	r22, 0x10	; 16
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
 2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <input_int+0x80>
			
			}
		} 
		else if (length < max_length) 
 2b6:	03 30       	cpi	r16, 0x03	; 3
 2b8:	60 f4       	brcc	.+24     	; 0x2d2 <input_int+0x80>
		{	
			// enter digit?
			lcd_write(DATA, key);
 2ba:	68 2f       	mov	r22, r24
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
			numbers[length] = key;
 2c2:	e1 e0       	ldi	r30, 0x01	; 1
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ec 0f       	add	r30, r28
 2c8:	fd 1f       	adc	r31, r29
 2ca:	e0 0f       	add	r30, r16
 2cc:	f1 1d       	adc	r31, r1
 2ce:	10 83       	st	Z, r17
			length++;
 2d0:	0f 5f       	subi	r16, 0xFF	; 255
		}

		while(numkey_read() != NO_KEY);	// continue when key is released!
 2d2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <numkey_read>
 2d6:	81 11       	cpse	r24, r1
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <input_int+0x80>
 2da:	d4 cf       	rjmp	.-88     	; 0x284 <input_int+0x32>
										//UPPGIFT: Skriv kod så att koden stannar/"loopar" tills att numkey_read() inte längre detekterar en knapptryckning! Stannar i while loopen så länge som den inte får NO_KEY
	};
	// terminate string
	numbers[length] = '\0';
 2dc:	fe 01       	movw	r30, r28
 2de:	e0 0f       	add	r30, r16
 2e0:	f1 1d       	adc	r31, r1
 2e2:	11 82       	std	Z+1, r1	; 0x01
	
	// if a number was entered...
	if (length > 0) {
 2e4:	00 23       	and	r16, r16
 2e6:	61 f1       	breq	.+88     	; 0x340 <input_int+0xee>
{
	uint16_t result = 0;
	uint16_t multiplier = 1;
	uint8_t ascii;
	uint8_t nr;
	uint8_t pos = length - 1;
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	20 0f       	add	r18, r16
	while (1) {
		// determine ascii code
		ascii = (uint8_t) *(p_str + pos);
 2ec:	fe 01       	movw	r30, r28
 2ee:	e2 0f       	add	r30, r18
 2f0:	f1 1d       	adc	r31, r1
		// determine number (0-9)
		nr = ascii - 48;
		// convert number and add to result
		result += nr * multiplier;
 2f2:	41 81       	ldd	r20, Z+1	; 0x01
 2f4:	40 53       	subi	r20, 0x30	; 48
 2f6:	50 e0       	ldi	r21, 0x00	; 0
		
		multiplier *= 10;
		if (pos > 0) {
 2f8:	22 23       	and	r18, r18
 2fa:	f9 f0       	breq	.+62     	; 0x33a <input_int+0xe8>
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	90 e0       	ldi	r25, 0x00	; 0
			pos--;
 300:	21 50       	subi	r18, 0x01	; 1
	uint8_t ascii;
	uint8_t nr;
	uint8_t pos = length - 1;
	while (1) {
		// determine ascii code
		ascii = (uint8_t) *(p_str + pos);
 302:	e1 e0       	ldi	r30, 0x01	; 1
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ec 0f       	add	r30, r28
 308:	fd 1f       	adc	r31, r29
 30a:	e2 0f       	add	r30, r18
 30c:	f1 1d       	adc	r31, r1
		// determine number (0-9)
		nr = ascii - 48;
		// convert number and add to result
		result += nr * multiplier;
 30e:	30 81       	ld	r19, Z
 310:	30 53       	subi	r19, 0x30	; 48
 312:	38 9f       	mul	r19, r24
 314:	b0 01       	movw	r22, r0
 316:	39 9f       	mul	r19, r25
 318:	70 0d       	add	r23, r0
 31a:	11 24       	eor	r1, r1
 31c:	46 0f       	add	r20, r22
 31e:	57 1f       	adc	r21, r23
		
		multiplier *= 10;
 320:	bc 01       	movw	r22, r24
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	86 0f       	add	r24, r22
 334:	97 1f       	adc	r25, r23
		if (pos > 0) {
 336:	21 11       	cpse	r18, r1
 338:	e3 cf       	rjmp	.-58     	; 0x300 <input_int+0xae>
		} else {
			break;
		}
	}
	// return result from conversion
	*p_nr = result;
 33a:	f7 01       	movw	r30, r14
 33c:	51 83       	std	Z+1, r21	; 0x01
 33e:	40 83       	st	Z, r20
		// convert number!
		str_to_uint16(numbers, length, p_int_nr);
	}
	// return the number of digits
	return length;
}
 340:	80 2f       	mov	r24, r16
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	08 95       	ret

00000358 <output_msg>:
 *	p_str1: pointer to first character of the string.
 *	p_str2: pointer to first character of the string.
 *  delay_after_msg: number of seconds to wait after message is shown.
 */
void output_msg(char *p_str1, char *p_str2, uint8_t delay_after_msg)
{
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	7c 01       	movw	r14, r24
 364:	8b 01       	movw	r16, r22
 366:	c4 2f       	mov	r28, r20
	lcd_set_cursor_mode(CURSOR_OFF);
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 30 02 	call	0x460	; 0x460 <lcd_set_cursor_mode>
	lcd_clear();
 36e:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>
	lcd_write_str(p_str1);
 372:	c7 01       	movw	r24, r14
 374:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_write_str>
	lcd_set_cursor_pos(1, 0);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_set_cursor_pos>
	lcd_write_str(p_str2);
 380:	c8 01       	movw	r24, r16
 382:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_write_str>
	delay_1_s(delay_after_msg);
 386:	8c 2f       	mov	r24, r28
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 6d 00 	call	0xda	; 0xda <delay_1_s>
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	08 95       	ret

0000039a <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 39a:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 39c:	80 ef       	ldi	r24, 0xF0	; 240
 39e:	84 b9       	out	0x04, r24	; 4
 3a0:	08 95       	ret

000003a2 <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	c0 e0       	ldi	r28, 0x00	; 0
 3ac:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t    i;
	for (i = 0; i < sizeof(key_map); i++){
		// UPPGIFT: använd SET_BIT_LEVELS() för att sätta bitar i registret PORTB!
		SET_BIT_LEVELS(PORTB,0x0F,i<<4);
 3ae:	85 b1       	in	r24, 0x05	; 5
 3b0:	28 2f       	mov	r18, r24
 3b2:	2f 70       	andi	r18, 0x0F	; 15
 3b4:	ce 01       	movw	r24, r28
 3b6:	82 95       	swap	r24
 3b8:	92 95       	swap	r25
 3ba:	90 7f       	andi	r25, 0xF0	; 240
 3bc:	98 27       	eor	r25, r24
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	98 27       	eor	r25, r24
 3c2:	82 2b       	or	r24, r18
 3c4:	85 b9       	out	0x05, r24	; 5
		// wait before reading pin
		delay_ms(1);
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_ms>
		// if key was pressed...
		if (PINE & 0b01000000) {    // UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
 3cc:	66 9b       	sbis	0x0c, 6	; 12
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <numkey_read+0x38>
			return key_map[i];
 3d0:	fe 01       	movw	r30, r28
 3d2:	e4 56       	subi	r30, 0x64	; 100
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	80 81       	ld	r24, Z
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <numkey_read+0x42>
 3da:	21 96       	adiw	r28, 0x01	; 1
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	uint8_t    i;
	for (i = 0; i < sizeof(key_map); i++){
 3dc:	cc 30       	cpi	r28, 0x0C	; 12
 3de:	d1 05       	cpc	r29, r1
 3e0:	31 f7       	brne	.-52     	; 0x3ae <numkey_read+0xc>
		if (PINE & 0b01000000) {    // UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
			return key_map[i];
		}
	}
	// no key was pressed!
	return NO_KEY;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
	
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <main>:
	

	uint16_t rnd_nr;
	
	// initialize HMI (LCD and numeric keyboard)
	hmi_init();
 3ee:	0e 94 24 01 	call	0x248	; 0x248 <hmi_init>
	// generate seed for the pseudo-random number generator
	random_seed();
 3f2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <random_seed>
	
	// show start screen for the game
	output_msg("Welcome!", "Let's play...", 3);
 3f6:	43 e0       	ldi	r20, 0x03	; 3
 3f8:	68 ea       	ldi	r22, 0xA8	; 168
 3fa:	71 e0       	ldi	r23, 0x01	; 1
 3fc:	86 eb       	ldi	r24, 0xB6	; 182
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 ac 01 	call	0x358	; 0x358 <output_msg>
	// play game
    while (1) {
		// generate a random number
	    rnd_nr = random_get_nr(100) + 1;
 404:	84 e6       	ldi	r24, 0x64	; 100
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 9c 02 	call	0x538	; 0x538 <random_get_nr>
		// play a round...
		play_guess_nr(rnd_nr);
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	0e 94 9a 00 	call	0x134	; 0x134 <play_guess_nr>
 412:	f8 cf       	rjmp	.-16     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>

00000414 <write_4bit_msb>:
 *	data: 4 bits of data
 */
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);	
 414:	91 b3       	in	r25, 0x11	; 17
 416:	9f 70       	andi	r25, 0x0F	; 15
 418:	80 7f       	andi	r24, 0xF0	; 240
 41a:	89 2b       	or	r24, r25
 41c:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 41e:	5f 9a       	sbi	0x0b, 7	; 11
	delay_1_micros();
 420:	0e 94 76 00 	call	0xec	; 0xec <delay_1_micros>
	CLR_BIT(PORTD, 7);
 424:	5f 98       	cbi	0x0b, 7	; 11
 426:	08 95       	ret

00000428 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Instruction or Data register)
 *	data: 8-bit instruction or data (character)
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 428:	cf 93       	push	r28
 42a:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 42c:	81 11       	cpse	r24, r1
 42e:	02 c0       	rjmp	.+4      	; 0x434 <lcd_write+0xc>
		CLR_BIT(PORTD, 6);	// Instruction Register
 430:	5e 98       	cbi	0x0b, 6	; 11
 432:	01 c0       	rjmp	.+2      	; 0x436 <lcd_write+0xe>
	} else {
		SET_BIT(PORTD, 6);	// Data Register
 434:	5e 9a       	sbi	0x0b, 6	; 11
	}
	// write data
	write_4bit_msb(data);
 436:	8c 2f       	mov	r24, r28
 438:	0e 94 0a 02 	call	0x414	; 0x414 <write_4bit_msb>
	write_4bit_msb(data << 4);
 43c:	8c 2f       	mov	r24, r28
 43e:	82 95       	swap	r24
 440:	80 7f       	andi	r24, 0xF0	; 240
 442:	0e 94 0a 02 	call	0x414	; 0x414 <write_4bit_msb>
	delay_micros(45);
 446:	8d e2       	ldi	r24, 0x2D	; 45
 448:	0e 94 7d 00 	call	0xfa	; 0xfa <delay_micros>
}
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <lcd_clear>:
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
	delay_ms(2);
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_ms>
 45e:	08 95       	ret

00000460 <lcd_set_cursor_mode>:
 */
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
	lcd_write(INSTRUCTION, cursor_mode);
 460:	68 2f       	mov	r22, r24
 462:	6c 60       	ori	r22, 0x0C	; 12
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
 46a:	08 95       	ret

0000046c <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 46c:	80 ef       	ldi	r24, 0xF0	; 240
 46e:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 470:	80 ec       	ldi	r24, 0xC0	; 192
 472:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 474:	84 e1       	ldi	r24, 0x14	; 20
 476:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 47a:	5e 98       	cbi	0x0b, 6	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 47c:	80 e3       	ldi	r24, 0x30	; 48
 47e:	0e 94 0a 02 	call	0x414	; 0x414 <write_4bit_msb>
	delay_ms(10);
 482:	8a e0       	ldi	r24, 0x0A	; 10
 484:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_ms>
	write_4bit_msb(0x30);
 488:	80 e3       	ldi	r24, 0x30	; 48
 48a:	0e 94 0a 02 	call	0x414	; 0x414 <write_4bit_msb>
	delay_ms(10);
 48e:	8a e0       	ldi	r24, 0x0A	; 10
 490:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_ms>
	write_4bit_msb(0x30);
 494:	80 e3       	ldi	r24, 0x30	; 48
 496:	0e 94 0a 02 	call	0x414	; 0x414 <write_4bit_msb>
	delay_ms(10);
 49a:	8a e0       	ldi	r24, 0x0A	; 10
 49c:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 4a0:	80 e2       	ldi	r24, 0x20	; 32
 4a2:	0e 94 0a 02 	call	0x414	; 0x414 <write_4bit_msb>
	delay_micros(45);
 4a6:	8d e2       	ldi	r24, 0x2D	; 45
 4a8:	0e 94 7d 00 	call	0xfa	; 0xfa <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);		
 4ac:	68 e2       	ldi	r22, 0x28	; 40
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_OFF);
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 30 02 	call	0x460	; 0x460 <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 4ba:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 4be:	66 e0       	ldi	r22, 0x06	; 6
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
 4c6:	08 95       	ret

000004c8 <lcd_set_cursor_pos>:
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
	lcd_write(INSTRUCTION, cursor_pos);
 4c8:	20 e4       	ldi	r18, 0x40	; 64
 4ca:	82 9f       	mul	r24, r18
 4cc:	c0 01       	movw	r24, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	60 68       	ori	r22, 0x80	; 128
 4d2:	68 2b       	or	r22, r24
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
 4da:	08 95       	ret

000004dc <lcd_write_str>:
 *
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
	// you need 0 to end an array
	while(*p_str != '\0') {
 4e0:	fc 01       	movw	r30, r24
 4e2:	60 81       	ld	r22, Z
 4e4:	66 23       	and	r22, r22
 4e6:	41 f0       	breq	.+16     	; 0x4f8 <lcd_write_str+0x1c>
 4e8:	ec 01       	movw	r28, r24
 4ea:	21 96       	adiw	r28, 0x01	; 1
		lcd_write(DATA, *p_str);
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
	// you need 0 to end an array
	while(*p_str != '\0') {
 4f2:	69 91       	ld	r22, Y+
 4f4:	61 11       	cpse	r22, r1
 4f6:	fa cf       	rjmp	.-12     	; 0x4ec <lcd_write_str+0x10>
		lcd_write(DATA, *p_str);
		p_str++;
		
	}	
	return;
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <random_seed>:
 * Initialize the ADC.
 */
static void init_adc(void)
{
	// set reference voltage (internal 5V), select ADC0 channel (A5)
	ADMUX = (1 << REFS0);
 4fe:	80 e4       	ldi	r24, 0x40	; 64
 500:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// right adjustment of ADC result, prescaler 128
	ADCSRA = 7;
 504:	ea e7       	ldi	r30, 0x7A	; 122
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	87 e0       	ldi	r24, 0x07	; 7
 50a:	80 83       	st	Z, r24
	// enable ADC
	ADCSRA = (1 << ADEN);
 50c:	80 e8       	ldi	r24, 0x80	; 128
 50e:	80 83       	st	Z, r24
	// disable digital input on ADCO
	DIDR0 = 1;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 * Read the ADC to get a random number.
 */
static uint16_t read_adc(void)
{
	// start conversion
	ADCSRA |= (1 << ADSC);
 516:	80 81       	ld	r24, Z
 518:	80 64       	ori	r24, 0x40	; 64
 51a:	80 83       	st	Z, r24
	// wait until conversion is finished
	while ((ADCSRA & (1 << ADIF)) == 0);
 51c:	80 81       	ld	r24, Z
 51e:	84 ff       	sbrs	r24, 4
 520:	fd cf       	rjmp	.-6      	; 0x51c <random_seed+0x1e>
	// read and return ADC value
	return ((ADCH << 8) | ADCL);
 522:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 526:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 * This function should only be run once!
 */
void random_seed(void)
{
	init_adc();
	srandom(read_adc());
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	78 2b       	or	r23, r24
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 89 03 	call	0x712	; 0x712 <srandom>
 536:	08 95       	ret

00000538 <random_get_nr>:
 *	max: specifies the range of integers
 * return:
 *	random number between 0-(max-1)
 */
uint16_t random_get_nr(uint16_t max)
{
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
	if (max == 0) {
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	51 f0       	breq	.+20     	; 0x554 <random_get_nr+0x1c>
 540:	ec 01       	movw	r28, r24
		return 0;
	}
	return (random() % max);
 542:	0e 94 3b 03 	call	0x676	; 0x676 <random>
 546:	9e 01       	movw	r18, r28
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	0e 94 af 02 	call	0x55e	; 0x55e <__divmodsi4>
 550:	cb 01       	movw	r24, r22
 552:	02 c0       	rjmp	.+4      	; 0x558 <random_get_nr+0x20>
 *	random number between 0-(max-1)
 */
uint16_t random_get_nr(uint16_t max)
{
	if (max == 0) {
		return 0;
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	90 e0       	ldi	r25, 0x00	; 0
	}
	return (random() % max);
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <__divmodsi4>:
 55e:	05 2e       	mov	r0, r21
 560:	97 fb       	bst	r25, 7
 562:	1e f4       	brtc	.+6      	; 0x56a <__divmodsi4+0xc>
 564:	00 94       	com	r0
 566:	0e 94 c6 02 	call	0x58c	; 0x58c <__negsi2>
 56a:	57 fd       	sbrc	r21, 7
 56c:	07 d0       	rcall	.+14     	; 0x57c <__divmodsi4_neg2>
 56e:	0e 94 ce 02 	call	0x59c	; 0x59c <__udivmodsi4>
 572:	07 fc       	sbrc	r0, 7
 574:	03 d0       	rcall	.+6      	; 0x57c <__divmodsi4_neg2>
 576:	4e f4       	brtc	.+18     	; 0x58a <__divmodsi4_exit>
 578:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__negsi2>

0000057c <__divmodsi4_neg2>:
 57c:	50 95       	com	r21
 57e:	40 95       	com	r20
 580:	30 95       	com	r19
 582:	21 95       	neg	r18
 584:	3f 4f       	sbci	r19, 0xFF	; 255
 586:	4f 4f       	sbci	r20, 0xFF	; 255
 588:	5f 4f       	sbci	r21, 0xFF	; 255

0000058a <__divmodsi4_exit>:
 58a:	08 95       	ret

0000058c <__negsi2>:
 58c:	90 95       	com	r25
 58e:	80 95       	com	r24
 590:	70 95       	com	r23
 592:	61 95       	neg	r22
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	8f 4f       	sbci	r24, 0xFF	; 255
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	08 95       	ret

0000059c <__udivmodsi4>:
 59c:	a1 e2       	ldi	r26, 0x21	; 33
 59e:	1a 2e       	mov	r1, r26
 5a0:	aa 1b       	sub	r26, r26
 5a2:	bb 1b       	sub	r27, r27
 5a4:	fd 01       	movw	r30, r26
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <__udivmodsi4_ep>

000005a8 <__udivmodsi4_loop>:
 5a8:	aa 1f       	adc	r26, r26
 5aa:	bb 1f       	adc	r27, r27
 5ac:	ee 1f       	adc	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	a2 17       	cp	r26, r18
 5b2:	b3 07       	cpc	r27, r19
 5b4:	e4 07       	cpc	r30, r20
 5b6:	f5 07       	cpc	r31, r21
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__udivmodsi4_ep>
 5ba:	a2 1b       	sub	r26, r18
 5bc:	b3 0b       	sbc	r27, r19
 5be:	e4 0b       	sbc	r30, r20
 5c0:	f5 0b       	sbc	r31, r21

000005c2 <__udivmodsi4_ep>:
 5c2:	66 1f       	adc	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	1a 94       	dec	r1
 5cc:	69 f7       	brne	.-38     	; 0x5a8 <__udivmodsi4_loop>
 5ce:	60 95       	com	r22
 5d0:	70 95       	com	r23
 5d2:	80 95       	com	r24
 5d4:	90 95       	com	r25
 5d6:	9b 01       	movw	r18, r22
 5d8:	ac 01       	movw	r20, r24
 5da:	bd 01       	movw	r22, r26
 5dc:	cf 01       	movw	r24, r30
 5de:	08 95       	ret

000005e0 <random_r>:
 5e0:	8f 92       	push	r8
 5e2:	9f 92       	push	r9
 5e4:	af 92       	push	r10
 5e6:	bf 92       	push	r11
 5e8:	cf 92       	push	r12
 5ea:	df 92       	push	r13
 5ec:	ef 92       	push	r14
 5ee:	ff 92       	push	r15
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	ec 01       	movw	r28, r24
 5f6:	68 81       	ld	r22, Y
 5f8:	79 81       	ldd	r23, Y+1	; 0x01
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	9b 81       	ldd	r25, Y+3	; 0x03
 5fe:	61 15       	cp	r22, r1
 600:	71 05       	cpc	r23, r1
 602:	81 05       	cpc	r24, r1
 604:	91 05       	cpc	r25, r1
 606:	21 f4       	brne	.+8      	; 0x610 <random_r+0x30>
 608:	64 e2       	ldi	r22, 0x24	; 36
 60a:	79 ed       	ldi	r23, 0xD9	; 217
 60c:	8b e5       	ldi	r24, 0x5B	; 91
 60e:	97 e0       	ldi	r25, 0x07	; 7
 610:	2d e1       	ldi	r18, 0x1D	; 29
 612:	33 ef       	ldi	r19, 0xF3	; 243
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	0e 94 af 02 	call	0x55e	; 0x55e <__divmodsi4>
 61c:	49 01       	movw	r8, r18
 61e:	5a 01       	movw	r10, r20
 620:	9b 01       	movw	r18, r22
 622:	ac 01       	movw	r20, r24
 624:	a7 ea       	ldi	r26, 0xA7	; 167
 626:	b1 e4       	ldi	r27, 0x41	; 65
 628:	0e 94 45 06 	call	0xc8a	; 0xc8a <__muluhisi3>
 62c:	6b 01       	movw	r12, r22
 62e:	7c 01       	movw	r14, r24
 630:	ac ee       	ldi	r26, 0xEC	; 236
 632:	b4 ef       	ldi	r27, 0xF4	; 244
 634:	a5 01       	movw	r20, r10
 636:	94 01       	movw	r18, r8
 638:	0e 94 53 06 	call	0xca6	; 0xca6 <__mulohisi3>
 63c:	dc 01       	movw	r26, r24
 63e:	cb 01       	movw	r24, r22
 640:	8c 0d       	add	r24, r12
 642:	9d 1d       	adc	r25, r13
 644:	ae 1d       	adc	r26, r14
 646:	bf 1d       	adc	r27, r15
 648:	b7 ff       	sbrs	r27, 7
 64a:	03 c0       	rjmp	.+6      	; 0x652 <random_r+0x72>
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	a1 09       	sbc	r26, r1
 650:	b0 48       	sbci	r27, 0x80	; 128
 652:	88 83       	st	Y, r24
 654:	99 83       	std	Y+1, r25	; 0x01
 656:	aa 83       	std	Y+2, r26	; 0x02
 658:	bb 83       	std	Y+3, r27	; 0x03
 65a:	bc 01       	movw	r22, r24
 65c:	cd 01       	movw	r24, r26
 65e:	9f 77       	andi	r25, 0x7F	; 127
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	df 90       	pop	r13
 66a:	cf 90       	pop	r12
 66c:	bf 90       	pop	r11
 66e:	af 90       	pop	r10
 670:	9f 90       	pop	r9
 672:	8f 90       	pop	r8
 674:	08 95       	ret

00000676 <random>:
 676:	8f 92       	push	r8
 678:	9f 92       	push	r9
 67a:	af 92       	push	r10
 67c:	bf 92       	push	r11
 67e:	cf 92       	push	r12
 680:	df 92       	push	r13
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 68a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 68e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 692:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 696:	61 15       	cp	r22, r1
 698:	71 05       	cpc	r23, r1
 69a:	81 05       	cpc	r24, r1
 69c:	91 05       	cpc	r25, r1
 69e:	21 f4       	brne	.+8      	; 0x6a8 <random+0x32>
 6a0:	64 e2       	ldi	r22, 0x24	; 36
 6a2:	79 ed       	ldi	r23, 0xD9	; 217
 6a4:	8b e5       	ldi	r24, 0x5B	; 91
 6a6:	97 e0       	ldi	r25, 0x07	; 7
 6a8:	2d e1       	ldi	r18, 0x1D	; 29
 6aa:	33 ef       	ldi	r19, 0xF3	; 243
 6ac:	41 e0       	ldi	r20, 0x01	; 1
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	0e 94 af 02 	call	0x55e	; 0x55e <__divmodsi4>
 6b4:	49 01       	movw	r8, r18
 6b6:	5a 01       	movw	r10, r20
 6b8:	9b 01       	movw	r18, r22
 6ba:	ac 01       	movw	r20, r24
 6bc:	a7 ea       	ldi	r26, 0xA7	; 167
 6be:	b1 e4       	ldi	r27, 0x41	; 65
 6c0:	0e 94 45 06 	call	0xc8a	; 0xc8a <__muluhisi3>
 6c4:	6b 01       	movw	r12, r22
 6c6:	7c 01       	movw	r14, r24
 6c8:	ac ee       	ldi	r26, 0xEC	; 236
 6ca:	b4 ef       	ldi	r27, 0xF4	; 244
 6cc:	a5 01       	movw	r20, r10
 6ce:	94 01       	movw	r18, r8
 6d0:	0e 94 53 06 	call	0xca6	; 0xca6 <__mulohisi3>
 6d4:	dc 01       	movw	r26, r24
 6d6:	cb 01       	movw	r24, r22
 6d8:	8c 0d       	add	r24, r12
 6da:	9d 1d       	adc	r25, r13
 6dc:	ae 1d       	adc	r26, r14
 6de:	bf 1d       	adc	r27, r15
 6e0:	b7 ff       	sbrs	r27, 7
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <random+0x74>
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	a1 09       	sbc	r26, r1
 6e8:	b0 48       	sbci	r27, 0x80	; 128
 6ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 6ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6f2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6f6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6fa:	bc 01       	movw	r22, r24
 6fc:	cd 01       	movw	r24, r26
 6fe:	9f 77       	andi	r25, 0x7F	; 127
 700:	ff 90       	pop	r15
 702:	ef 90       	pop	r14
 704:	df 90       	pop	r13
 706:	cf 90       	pop	r12
 708:	bf 90       	pop	r11
 70a:	af 90       	pop	r10
 70c:	9f 90       	pop	r9
 70e:	8f 90       	pop	r8
 710:	08 95       	ret

00000712 <srandom>:
 712:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 716:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 71a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 71e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 722:	08 95       	ret

00000724 <sprintf>:
 724:	ae e0       	ldi	r26, 0x0E	; 14
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	e8 e9       	ldi	r30, 0x98	; 152
 72a:	f3 e0       	ldi	r31, 0x03	; 3
 72c:	0c 94 66 06 	jmp	0xccc	; 0xccc <__prologue_saves__+0x1c>
 730:	0d 89       	ldd	r16, Y+21	; 0x15
 732:	1e 89       	ldd	r17, Y+22	; 0x16
 734:	86 e0       	ldi	r24, 0x06	; 6
 736:	8c 83       	std	Y+4, r24	; 0x04
 738:	1a 83       	std	Y+2, r17	; 0x02
 73a:	09 83       	std	Y+1, r16	; 0x01
 73c:	8f ef       	ldi	r24, 0xFF	; 255
 73e:	9f e7       	ldi	r25, 0x7F	; 127
 740:	9e 83       	std	Y+6, r25	; 0x06
 742:	8d 83       	std	Y+5, r24	; 0x05
 744:	ae 01       	movw	r20, r28
 746:	47 5e       	subi	r20, 0xE7	; 231
 748:	5f 4f       	sbci	r21, 0xFF	; 255
 74a:	6f 89       	ldd	r22, Y+23	; 0x17
 74c:	78 8d       	ldd	r23, Y+24	; 0x18
 74e:	ce 01       	movw	r24, r28
 750:	01 96       	adiw	r24, 0x01	; 1
 752:	0e 94 b4 03 	call	0x768	; 0x768 <vfprintf>
 756:	ef 81       	ldd	r30, Y+7	; 0x07
 758:	f8 85       	ldd	r31, Y+8	; 0x08
 75a:	e0 0f       	add	r30, r16
 75c:	f1 1f       	adc	r31, r17
 75e:	10 82       	st	Z, r1
 760:	2e 96       	adiw	r28, 0x0e	; 14
 762:	e4 e0       	ldi	r30, 0x04	; 4
 764:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__epilogue_restores__+0x1c>

00000768 <vfprintf>:
 768:	ab e0       	ldi	r26, 0x0B	; 11
 76a:	b0 e0       	ldi	r27, 0x00	; 0
 76c:	ea eb       	ldi	r30, 0xBA	; 186
 76e:	f3 e0       	ldi	r31, 0x03	; 3
 770:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__prologue_saves__>
 774:	6c 01       	movw	r12, r24
 776:	7b 01       	movw	r14, r22
 778:	8a 01       	movw	r16, r20
 77a:	fc 01       	movw	r30, r24
 77c:	17 82       	std	Z+7, r1	; 0x07
 77e:	16 82       	std	Z+6, r1	; 0x06
 780:	83 81       	ldd	r24, Z+3	; 0x03
 782:	81 ff       	sbrs	r24, 1
 784:	cc c1       	rjmp	.+920    	; 0xb1e <__stack+0x1f>
 786:	ce 01       	movw	r24, r28
 788:	01 96       	adiw	r24, 0x01	; 1
 78a:	3c 01       	movw	r6, r24
 78c:	f6 01       	movw	r30, r12
 78e:	93 81       	ldd	r25, Z+3	; 0x03
 790:	f7 01       	movw	r30, r14
 792:	93 fd       	sbrc	r25, 3
 794:	85 91       	lpm	r24, Z+
 796:	93 ff       	sbrs	r25, 3
 798:	81 91       	ld	r24, Z+
 79a:	7f 01       	movw	r14, r30
 79c:	88 23       	and	r24, r24
 79e:	09 f4       	brne	.+2      	; 0x7a2 <vfprintf+0x3a>
 7a0:	ba c1       	rjmp	.+884    	; 0xb16 <__stack+0x17>
 7a2:	85 32       	cpi	r24, 0x25	; 37
 7a4:	39 f4       	brne	.+14     	; 0x7b4 <vfprintf+0x4c>
 7a6:	93 fd       	sbrc	r25, 3
 7a8:	85 91       	lpm	r24, Z+
 7aa:	93 ff       	sbrs	r25, 3
 7ac:	81 91       	ld	r24, Z+
 7ae:	7f 01       	movw	r14, r30
 7b0:	85 32       	cpi	r24, 0x25	; 37
 7b2:	29 f4       	brne	.+10     	; 0x7be <vfprintf+0x56>
 7b4:	b6 01       	movw	r22, r12
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 ab 05 	call	0xb56	; 0xb56 <fputc>
 7bc:	e7 cf       	rjmp	.-50     	; 0x78c <vfprintf+0x24>
 7be:	91 2c       	mov	r9, r1
 7c0:	21 2c       	mov	r2, r1
 7c2:	31 2c       	mov	r3, r1
 7c4:	ff e1       	ldi	r31, 0x1F	; 31
 7c6:	f3 15       	cp	r31, r3
 7c8:	d8 f0       	brcs	.+54     	; 0x800 <vfprintf+0x98>
 7ca:	8b 32       	cpi	r24, 0x2B	; 43
 7cc:	79 f0       	breq	.+30     	; 0x7ec <vfprintf+0x84>
 7ce:	38 f4       	brcc	.+14     	; 0x7de <vfprintf+0x76>
 7d0:	80 32       	cpi	r24, 0x20	; 32
 7d2:	79 f0       	breq	.+30     	; 0x7f2 <vfprintf+0x8a>
 7d4:	83 32       	cpi	r24, 0x23	; 35
 7d6:	a1 f4       	brne	.+40     	; 0x800 <vfprintf+0x98>
 7d8:	23 2d       	mov	r18, r3
 7da:	20 61       	ori	r18, 0x10	; 16
 7dc:	1d c0       	rjmp	.+58     	; 0x818 <vfprintf+0xb0>
 7de:	8d 32       	cpi	r24, 0x2D	; 45
 7e0:	61 f0       	breq	.+24     	; 0x7fa <vfprintf+0x92>
 7e2:	80 33       	cpi	r24, 0x30	; 48
 7e4:	69 f4       	brne	.+26     	; 0x800 <vfprintf+0x98>
 7e6:	23 2d       	mov	r18, r3
 7e8:	21 60       	ori	r18, 0x01	; 1
 7ea:	16 c0       	rjmp	.+44     	; 0x818 <vfprintf+0xb0>
 7ec:	83 2d       	mov	r24, r3
 7ee:	82 60       	ori	r24, 0x02	; 2
 7f0:	38 2e       	mov	r3, r24
 7f2:	e3 2d       	mov	r30, r3
 7f4:	e4 60       	ori	r30, 0x04	; 4
 7f6:	3e 2e       	mov	r3, r30
 7f8:	2a c0       	rjmp	.+84     	; 0x84e <vfprintf+0xe6>
 7fa:	f3 2d       	mov	r31, r3
 7fc:	f8 60       	ori	r31, 0x08	; 8
 7fe:	1d c0       	rjmp	.+58     	; 0x83a <vfprintf+0xd2>
 800:	37 fc       	sbrc	r3, 7
 802:	2d c0       	rjmp	.+90     	; 0x85e <vfprintf+0xf6>
 804:	20 ed       	ldi	r18, 0xD0	; 208
 806:	28 0f       	add	r18, r24
 808:	2a 30       	cpi	r18, 0x0A	; 10
 80a:	40 f0       	brcs	.+16     	; 0x81c <vfprintf+0xb4>
 80c:	8e 32       	cpi	r24, 0x2E	; 46
 80e:	b9 f4       	brne	.+46     	; 0x83e <vfprintf+0xd6>
 810:	36 fc       	sbrc	r3, 6
 812:	81 c1       	rjmp	.+770    	; 0xb16 <__stack+0x17>
 814:	23 2d       	mov	r18, r3
 816:	20 64       	ori	r18, 0x40	; 64
 818:	32 2e       	mov	r3, r18
 81a:	19 c0       	rjmp	.+50     	; 0x84e <vfprintf+0xe6>
 81c:	36 fe       	sbrs	r3, 6
 81e:	06 c0       	rjmp	.+12     	; 0x82c <vfprintf+0xc4>
 820:	8a e0       	ldi	r24, 0x0A	; 10
 822:	98 9e       	mul	r9, r24
 824:	20 0d       	add	r18, r0
 826:	11 24       	eor	r1, r1
 828:	92 2e       	mov	r9, r18
 82a:	11 c0       	rjmp	.+34     	; 0x84e <vfprintf+0xe6>
 82c:	ea e0       	ldi	r30, 0x0A	; 10
 82e:	2e 9e       	mul	r2, r30
 830:	20 0d       	add	r18, r0
 832:	11 24       	eor	r1, r1
 834:	22 2e       	mov	r2, r18
 836:	f3 2d       	mov	r31, r3
 838:	f0 62       	ori	r31, 0x20	; 32
 83a:	3f 2e       	mov	r3, r31
 83c:	08 c0       	rjmp	.+16     	; 0x84e <vfprintf+0xe6>
 83e:	8c 36       	cpi	r24, 0x6C	; 108
 840:	21 f4       	brne	.+8      	; 0x84a <vfprintf+0xe2>
 842:	83 2d       	mov	r24, r3
 844:	80 68       	ori	r24, 0x80	; 128
 846:	38 2e       	mov	r3, r24
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0xe6>
 84a:	88 36       	cpi	r24, 0x68	; 104
 84c:	41 f4       	brne	.+16     	; 0x85e <vfprintf+0xf6>
 84e:	f7 01       	movw	r30, r14
 850:	93 fd       	sbrc	r25, 3
 852:	85 91       	lpm	r24, Z+
 854:	93 ff       	sbrs	r25, 3
 856:	81 91       	ld	r24, Z+
 858:	7f 01       	movw	r14, r30
 85a:	81 11       	cpse	r24, r1
 85c:	b3 cf       	rjmp	.-154    	; 0x7c4 <vfprintf+0x5c>
 85e:	98 2f       	mov	r25, r24
 860:	9f 7d       	andi	r25, 0xDF	; 223
 862:	95 54       	subi	r25, 0x45	; 69
 864:	93 30       	cpi	r25, 0x03	; 3
 866:	28 f4       	brcc	.+10     	; 0x872 <vfprintf+0x10a>
 868:	0c 5f       	subi	r16, 0xFC	; 252
 86a:	1f 4f       	sbci	r17, 0xFF	; 255
 86c:	9f e3       	ldi	r25, 0x3F	; 63
 86e:	99 83       	std	Y+1, r25	; 0x01
 870:	0d c0       	rjmp	.+26     	; 0x88c <vfprintf+0x124>
 872:	83 36       	cpi	r24, 0x63	; 99
 874:	31 f0       	breq	.+12     	; 0x882 <vfprintf+0x11a>
 876:	83 37       	cpi	r24, 0x73	; 115
 878:	71 f0       	breq	.+28     	; 0x896 <vfprintf+0x12e>
 87a:	83 35       	cpi	r24, 0x53	; 83
 87c:	09 f0       	breq	.+2      	; 0x880 <vfprintf+0x118>
 87e:	59 c0       	rjmp	.+178    	; 0x932 <vfprintf+0x1ca>
 880:	21 c0       	rjmp	.+66     	; 0x8c4 <vfprintf+0x15c>
 882:	f8 01       	movw	r30, r16
 884:	80 81       	ld	r24, Z
 886:	89 83       	std	Y+1, r24	; 0x01
 888:	0e 5f       	subi	r16, 0xFE	; 254
 88a:	1f 4f       	sbci	r17, 0xFF	; 255
 88c:	88 24       	eor	r8, r8
 88e:	83 94       	inc	r8
 890:	91 2c       	mov	r9, r1
 892:	53 01       	movw	r10, r6
 894:	13 c0       	rjmp	.+38     	; 0x8bc <vfprintf+0x154>
 896:	28 01       	movw	r4, r16
 898:	f2 e0       	ldi	r31, 0x02	; 2
 89a:	4f 0e       	add	r4, r31
 89c:	51 1c       	adc	r5, r1
 89e:	f8 01       	movw	r30, r16
 8a0:	a0 80       	ld	r10, Z
 8a2:	b1 80       	ldd	r11, Z+1	; 0x01
 8a4:	36 fe       	sbrs	r3, 6
 8a6:	03 c0       	rjmp	.+6      	; 0x8ae <vfprintf+0x146>
 8a8:	69 2d       	mov	r22, r9
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <vfprintf+0x14a>
 8ae:	6f ef       	ldi	r22, 0xFF	; 255
 8b0:	7f ef       	ldi	r23, 0xFF	; 255
 8b2:	c5 01       	movw	r24, r10
 8b4:	0e 94 a0 05 	call	0xb40	; 0xb40 <strnlen>
 8b8:	4c 01       	movw	r8, r24
 8ba:	82 01       	movw	r16, r4
 8bc:	f3 2d       	mov	r31, r3
 8be:	ff 77       	andi	r31, 0x7F	; 127
 8c0:	3f 2e       	mov	r3, r31
 8c2:	16 c0       	rjmp	.+44     	; 0x8f0 <vfprintf+0x188>
 8c4:	28 01       	movw	r4, r16
 8c6:	22 e0       	ldi	r18, 0x02	; 2
 8c8:	42 0e       	add	r4, r18
 8ca:	51 1c       	adc	r5, r1
 8cc:	f8 01       	movw	r30, r16
 8ce:	a0 80       	ld	r10, Z
 8d0:	b1 80       	ldd	r11, Z+1	; 0x01
 8d2:	36 fe       	sbrs	r3, 6
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <vfprintf+0x174>
 8d6:	69 2d       	mov	r22, r9
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <vfprintf+0x178>
 8dc:	6f ef       	ldi	r22, 0xFF	; 255
 8de:	7f ef       	ldi	r23, 0xFF	; 255
 8e0:	c5 01       	movw	r24, r10
 8e2:	0e 94 95 05 	call	0xb2a	; 0xb2a <strnlen_P>
 8e6:	4c 01       	movw	r8, r24
 8e8:	f3 2d       	mov	r31, r3
 8ea:	f0 68       	ori	r31, 0x80	; 128
 8ec:	3f 2e       	mov	r3, r31
 8ee:	82 01       	movw	r16, r4
 8f0:	33 fc       	sbrc	r3, 3
 8f2:	1b c0       	rjmp	.+54     	; 0x92a <vfprintf+0x1c2>
 8f4:	82 2d       	mov	r24, r2
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	88 16       	cp	r8, r24
 8fa:	99 06       	cpc	r9, r25
 8fc:	b0 f4       	brcc	.+44     	; 0x92a <vfprintf+0x1c2>
 8fe:	b6 01       	movw	r22, r12
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 ab 05 	call	0xb56	; 0xb56 <fputc>
 908:	2a 94       	dec	r2
 90a:	f4 cf       	rjmp	.-24     	; 0x8f4 <vfprintf+0x18c>
 90c:	f5 01       	movw	r30, r10
 90e:	37 fc       	sbrc	r3, 7
 910:	85 91       	lpm	r24, Z+
 912:	37 fe       	sbrs	r3, 7
 914:	81 91       	ld	r24, Z+
 916:	5f 01       	movw	r10, r30
 918:	b6 01       	movw	r22, r12
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 ab 05 	call	0xb56	; 0xb56 <fputc>
 920:	21 10       	cpse	r2, r1
 922:	2a 94       	dec	r2
 924:	21 e0       	ldi	r18, 0x01	; 1
 926:	82 1a       	sub	r8, r18
 928:	91 08       	sbc	r9, r1
 92a:	81 14       	cp	r8, r1
 92c:	91 04       	cpc	r9, r1
 92e:	71 f7       	brne	.-36     	; 0x90c <vfprintf+0x1a4>
 930:	e8 c0       	rjmp	.+464    	; 0xb02 <__stack+0x3>
 932:	84 36       	cpi	r24, 0x64	; 100
 934:	11 f0       	breq	.+4      	; 0x93a <vfprintf+0x1d2>
 936:	89 36       	cpi	r24, 0x69	; 105
 938:	41 f5       	brne	.+80     	; 0x98a <vfprintf+0x222>
 93a:	f8 01       	movw	r30, r16
 93c:	37 fe       	sbrs	r3, 7
 93e:	07 c0       	rjmp	.+14     	; 0x94e <vfprintf+0x1e6>
 940:	60 81       	ld	r22, Z
 942:	71 81       	ldd	r23, Z+1	; 0x01
 944:	82 81       	ldd	r24, Z+2	; 0x02
 946:	93 81       	ldd	r25, Z+3	; 0x03
 948:	0c 5f       	subi	r16, 0xFC	; 252
 94a:	1f 4f       	sbci	r17, 0xFF	; 255
 94c:	08 c0       	rjmp	.+16     	; 0x95e <vfprintf+0x1f6>
 94e:	60 81       	ld	r22, Z
 950:	71 81       	ldd	r23, Z+1	; 0x01
 952:	07 2e       	mov	r0, r23
 954:	00 0c       	add	r0, r0
 956:	88 0b       	sbc	r24, r24
 958:	99 0b       	sbc	r25, r25
 95a:	0e 5f       	subi	r16, 0xFE	; 254
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	f3 2d       	mov	r31, r3
 960:	ff 76       	andi	r31, 0x6F	; 111
 962:	3f 2e       	mov	r3, r31
 964:	97 ff       	sbrs	r25, 7
 966:	09 c0       	rjmp	.+18     	; 0x97a <vfprintf+0x212>
 968:	90 95       	com	r25
 96a:	80 95       	com	r24
 96c:	70 95       	com	r23
 96e:	61 95       	neg	r22
 970:	7f 4f       	sbci	r23, 0xFF	; 255
 972:	8f 4f       	sbci	r24, 0xFF	; 255
 974:	9f 4f       	sbci	r25, 0xFF	; 255
 976:	f0 68       	ori	r31, 0x80	; 128
 978:	3f 2e       	mov	r3, r31
 97a:	2a e0       	ldi	r18, 0x0A	; 10
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	a3 01       	movw	r20, r6
 980:	0e 94 e7 05 	call	0xbce	; 0xbce <__ultoa_invert>
 984:	88 2e       	mov	r8, r24
 986:	86 18       	sub	r8, r6
 988:	45 c0       	rjmp	.+138    	; 0xa14 <__DATA_REGION_LENGTH__+0x14>
 98a:	85 37       	cpi	r24, 0x75	; 117
 98c:	31 f4       	brne	.+12     	; 0x99a <vfprintf+0x232>
 98e:	23 2d       	mov	r18, r3
 990:	2f 7e       	andi	r18, 0xEF	; 239
 992:	b2 2e       	mov	r11, r18
 994:	2a e0       	ldi	r18, 0x0A	; 10
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	25 c0       	rjmp	.+74     	; 0x9e4 <vfprintf+0x27c>
 99a:	93 2d       	mov	r25, r3
 99c:	99 7f       	andi	r25, 0xF9	; 249
 99e:	b9 2e       	mov	r11, r25
 9a0:	8f 36       	cpi	r24, 0x6F	; 111
 9a2:	c1 f0       	breq	.+48     	; 0x9d4 <vfprintf+0x26c>
 9a4:	18 f4       	brcc	.+6      	; 0x9ac <vfprintf+0x244>
 9a6:	88 35       	cpi	r24, 0x58	; 88
 9a8:	79 f0       	breq	.+30     	; 0x9c8 <vfprintf+0x260>
 9aa:	b5 c0       	rjmp	.+362    	; 0xb16 <__stack+0x17>
 9ac:	80 37       	cpi	r24, 0x70	; 112
 9ae:	19 f0       	breq	.+6      	; 0x9b6 <vfprintf+0x24e>
 9b0:	88 37       	cpi	r24, 0x78	; 120
 9b2:	21 f0       	breq	.+8      	; 0x9bc <vfprintf+0x254>
 9b4:	b0 c0       	rjmp	.+352    	; 0xb16 <__stack+0x17>
 9b6:	e9 2f       	mov	r30, r25
 9b8:	e0 61       	ori	r30, 0x10	; 16
 9ba:	be 2e       	mov	r11, r30
 9bc:	b4 fe       	sbrs	r11, 4
 9be:	0d c0       	rjmp	.+26     	; 0x9da <vfprintf+0x272>
 9c0:	fb 2d       	mov	r31, r11
 9c2:	f4 60       	ori	r31, 0x04	; 4
 9c4:	bf 2e       	mov	r11, r31
 9c6:	09 c0       	rjmp	.+18     	; 0x9da <vfprintf+0x272>
 9c8:	34 fe       	sbrs	r3, 4
 9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <vfprintf+0x278>
 9cc:	29 2f       	mov	r18, r25
 9ce:	26 60       	ori	r18, 0x06	; 6
 9d0:	b2 2e       	mov	r11, r18
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0x278>
 9d4:	28 e0       	ldi	r18, 0x08	; 8
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <vfprintf+0x27c>
 9da:	20 e1       	ldi	r18, 0x10	; 16
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <vfprintf+0x27c>
 9e0:	20 e1       	ldi	r18, 0x10	; 16
 9e2:	32 e0       	ldi	r19, 0x02	; 2
 9e4:	f8 01       	movw	r30, r16
 9e6:	b7 fe       	sbrs	r11, 7
 9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <vfprintf+0x290>
 9ea:	60 81       	ld	r22, Z
 9ec:	71 81       	ldd	r23, Z+1	; 0x01
 9ee:	82 81       	ldd	r24, Z+2	; 0x02
 9f0:	93 81       	ldd	r25, Z+3	; 0x03
 9f2:	0c 5f       	subi	r16, 0xFC	; 252
 9f4:	1f 4f       	sbci	r17, 0xFF	; 255
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <__DATA_REGION_LENGTH__+0x4>
 9f8:	60 81       	ld	r22, Z
 9fa:	71 81       	ldd	r23, Z+1	; 0x01
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 5f       	subi	r16, 0xFE	; 254
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	a3 01       	movw	r20, r6
 a06:	0e 94 e7 05 	call	0xbce	; 0xbce <__ultoa_invert>
 a0a:	88 2e       	mov	r8, r24
 a0c:	86 18       	sub	r8, r6
 a0e:	fb 2d       	mov	r31, r11
 a10:	ff 77       	andi	r31, 0x7F	; 127
 a12:	3f 2e       	mov	r3, r31
 a14:	36 fe       	sbrs	r3, 6
 a16:	0d c0       	rjmp	.+26     	; 0xa32 <__DATA_REGION_LENGTH__+0x32>
 a18:	23 2d       	mov	r18, r3
 a1a:	2e 7f       	andi	r18, 0xFE	; 254
 a1c:	a2 2e       	mov	r10, r18
 a1e:	89 14       	cp	r8, r9
 a20:	58 f4       	brcc	.+22     	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 a22:	34 fe       	sbrs	r3, 4
 a24:	0b c0       	rjmp	.+22     	; 0xa3c <__DATA_REGION_LENGTH__+0x3c>
 a26:	32 fc       	sbrc	r3, 2
 a28:	09 c0       	rjmp	.+18     	; 0xa3c <__DATA_REGION_LENGTH__+0x3c>
 a2a:	83 2d       	mov	r24, r3
 a2c:	8e 7e       	andi	r24, 0xEE	; 238
 a2e:	a8 2e       	mov	r10, r24
 a30:	05 c0       	rjmp	.+10     	; 0xa3c <__DATA_REGION_LENGTH__+0x3c>
 a32:	b8 2c       	mov	r11, r8
 a34:	a3 2c       	mov	r10, r3
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <__DATA_REGION_LENGTH__+0x3e>
 a38:	b8 2c       	mov	r11, r8
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__DATA_REGION_LENGTH__+0x3e>
 a3c:	b9 2c       	mov	r11, r9
 a3e:	a4 fe       	sbrs	r10, 4
 a40:	0f c0       	rjmp	.+30     	; 0xa60 <__DATA_REGION_LENGTH__+0x60>
 a42:	fe 01       	movw	r30, r28
 a44:	e8 0d       	add	r30, r8
 a46:	f1 1d       	adc	r31, r1
 a48:	80 81       	ld	r24, Z
 a4a:	80 33       	cpi	r24, 0x30	; 48
 a4c:	21 f4       	brne	.+8      	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
 a4e:	9a 2d       	mov	r25, r10
 a50:	99 7e       	andi	r25, 0xE9	; 233
 a52:	a9 2e       	mov	r10, r25
 a54:	09 c0       	rjmp	.+18     	; 0xa68 <__DATA_REGION_LENGTH__+0x68>
 a56:	a2 fe       	sbrs	r10, 2
 a58:	06 c0       	rjmp	.+12     	; 0xa66 <__DATA_REGION_LENGTH__+0x66>
 a5a:	b3 94       	inc	r11
 a5c:	b3 94       	inc	r11
 a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__DATA_REGION_LENGTH__+0x68>
 a60:	8a 2d       	mov	r24, r10
 a62:	86 78       	andi	r24, 0x86	; 134
 a64:	09 f0       	breq	.+2      	; 0xa68 <__DATA_REGION_LENGTH__+0x68>
 a66:	b3 94       	inc	r11
 a68:	a3 fc       	sbrc	r10, 3
 a6a:	11 c0       	rjmp	.+34     	; 0xa8e <__DATA_REGION_LENGTH__+0x8e>
 a6c:	a0 fe       	sbrs	r10, 0
 a6e:	06 c0       	rjmp	.+12     	; 0xa7c <__DATA_REGION_LENGTH__+0x7c>
 a70:	b2 14       	cp	r11, r2
 a72:	88 f4       	brcc	.+34     	; 0xa96 <__DATA_REGION_LENGTH__+0x96>
 a74:	28 0c       	add	r2, r8
 a76:	92 2c       	mov	r9, r2
 a78:	9b 18       	sub	r9, r11
 a7a:	0e c0       	rjmp	.+28     	; 0xa98 <__DATA_REGION_LENGTH__+0x98>
 a7c:	b2 14       	cp	r11, r2
 a7e:	60 f4       	brcc	.+24     	; 0xa98 <__DATA_REGION_LENGTH__+0x98>
 a80:	b6 01       	movw	r22, r12
 a82:	80 e2       	ldi	r24, 0x20	; 32
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 ab 05 	call	0xb56	; 0xb56 <fputc>
 a8a:	b3 94       	inc	r11
 a8c:	f7 cf       	rjmp	.-18     	; 0xa7c <__DATA_REGION_LENGTH__+0x7c>
 a8e:	b2 14       	cp	r11, r2
 a90:	18 f4       	brcc	.+6      	; 0xa98 <__DATA_REGION_LENGTH__+0x98>
 a92:	2b 18       	sub	r2, r11
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <__DATA_REGION_LENGTH__+0x9a>
 a96:	98 2c       	mov	r9, r8
 a98:	21 2c       	mov	r2, r1
 a9a:	a4 fe       	sbrs	r10, 4
 a9c:	10 c0       	rjmp	.+32     	; 0xabe <__DATA_REGION_LENGTH__+0xbe>
 a9e:	b6 01       	movw	r22, r12
 aa0:	80 e3       	ldi	r24, 0x30	; 48
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 ab 05 	call	0xb56	; 0xb56 <fputc>
 aa8:	a2 fe       	sbrs	r10, 2
 aaa:	17 c0       	rjmp	.+46     	; 0xada <__DATA_REGION_LENGTH__+0xda>
 aac:	a1 fc       	sbrc	r10, 1
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <__DATA_REGION_LENGTH__+0xb6>
 ab0:	88 e7       	ldi	r24, 0x78	; 120
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <__DATA_REGION_LENGTH__+0xba>
 ab6:	88 e5       	ldi	r24, 0x58	; 88
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	b6 01       	movw	r22, r12
 abc:	0c c0       	rjmp	.+24     	; 0xad6 <__DATA_REGION_LENGTH__+0xd6>
 abe:	8a 2d       	mov	r24, r10
 ac0:	86 78       	andi	r24, 0x86	; 134
 ac2:	59 f0       	breq	.+22     	; 0xada <__DATA_REGION_LENGTH__+0xda>
 ac4:	a1 fe       	sbrs	r10, 1
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <__DATA_REGION_LENGTH__+0xcc>
 ac8:	8b e2       	ldi	r24, 0x2B	; 43
 aca:	01 c0       	rjmp	.+2      	; 0xace <__DATA_REGION_LENGTH__+0xce>
 acc:	80 e2       	ldi	r24, 0x20	; 32
 ace:	a7 fc       	sbrc	r10, 7
 ad0:	8d e2       	ldi	r24, 0x2D	; 45
 ad2:	b6 01       	movw	r22, r12
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 94 ab 05 	call	0xb56	; 0xb56 <fputc>
 ada:	89 14       	cp	r8, r9
 adc:	38 f4       	brcc	.+14     	; 0xaec <__DATA_REGION_LENGTH__+0xec>
 ade:	b6 01       	movw	r22, r12
 ae0:	80 e3       	ldi	r24, 0x30	; 48
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 ab 05 	call	0xb56	; 0xb56 <fputc>
 ae8:	9a 94       	dec	r9
 aea:	f7 cf       	rjmp	.-18     	; 0xada <__DATA_REGION_LENGTH__+0xda>
 aec:	8a 94       	dec	r8
 aee:	f3 01       	movw	r30, r6
 af0:	e8 0d       	add	r30, r8
 af2:	f1 1d       	adc	r31, r1
 af4:	80 81       	ld	r24, Z
 af6:	b6 01       	movw	r22, r12
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 94 ab 05 	call	0xb56	; 0xb56 <fputc>
 afe:	81 10       	cpse	r8, r1
 b00:	f5 cf       	rjmp	.-22     	; 0xaec <__DATA_REGION_LENGTH__+0xec>
 b02:	22 20       	and	r2, r2
 b04:	09 f4       	brne	.+2      	; 0xb08 <__stack+0x9>
 b06:	42 ce       	rjmp	.-892    	; 0x78c <vfprintf+0x24>
 b08:	b6 01       	movw	r22, r12
 b0a:	80 e2       	ldi	r24, 0x20	; 32
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	0e 94 ab 05 	call	0xb56	; 0xb56 <fputc>
 b12:	2a 94       	dec	r2
 b14:	f6 cf       	rjmp	.-20     	; 0xb02 <__stack+0x3>
 b16:	f6 01       	movw	r30, r12
 b18:	86 81       	ldd	r24, Z+6	; 0x06
 b1a:	97 81       	ldd	r25, Z+7	; 0x07
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <__stack+0x23>
 b1e:	8f ef       	ldi	r24, 0xFF	; 255
 b20:	9f ef       	ldi	r25, 0xFF	; 255
 b22:	2b 96       	adiw	r28, 0x0b	; 11
 b24:	e2 e1       	ldi	r30, 0x12	; 18
 b26:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__epilogue_restores__>

00000b2a <strnlen_P>:
 b2a:	fc 01       	movw	r30, r24
 b2c:	05 90       	lpm	r0, Z+
 b2e:	61 50       	subi	r22, 0x01	; 1
 b30:	70 40       	sbci	r23, 0x00	; 0
 b32:	01 10       	cpse	r0, r1
 b34:	d8 f7       	brcc	.-10     	; 0xb2c <strnlen_P+0x2>
 b36:	80 95       	com	r24
 b38:	90 95       	com	r25
 b3a:	8e 0f       	add	r24, r30
 b3c:	9f 1f       	adc	r25, r31
 b3e:	08 95       	ret

00000b40 <strnlen>:
 b40:	fc 01       	movw	r30, r24
 b42:	61 50       	subi	r22, 0x01	; 1
 b44:	70 40       	sbci	r23, 0x00	; 0
 b46:	01 90       	ld	r0, Z+
 b48:	01 10       	cpse	r0, r1
 b4a:	d8 f7       	brcc	.-10     	; 0xb42 <strnlen+0x2>
 b4c:	80 95       	com	r24
 b4e:	90 95       	com	r25
 b50:	8e 0f       	add	r24, r30
 b52:	9f 1f       	adc	r25, r31
 b54:	08 95       	ret

00000b56 <fputc>:
 b56:	0f 93       	push	r16
 b58:	1f 93       	push	r17
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
 b5e:	fb 01       	movw	r30, r22
 b60:	23 81       	ldd	r18, Z+3	; 0x03
 b62:	21 fd       	sbrc	r18, 1
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <fputc+0x16>
 b66:	8f ef       	ldi	r24, 0xFF	; 255
 b68:	9f ef       	ldi	r25, 0xFF	; 255
 b6a:	2c c0       	rjmp	.+88     	; 0xbc4 <fputc+0x6e>
 b6c:	22 ff       	sbrs	r18, 2
 b6e:	16 c0       	rjmp	.+44     	; 0xb9c <fputc+0x46>
 b70:	46 81       	ldd	r20, Z+6	; 0x06
 b72:	57 81       	ldd	r21, Z+7	; 0x07
 b74:	24 81       	ldd	r18, Z+4	; 0x04
 b76:	35 81       	ldd	r19, Z+5	; 0x05
 b78:	42 17       	cp	r20, r18
 b7a:	53 07       	cpc	r21, r19
 b7c:	44 f4       	brge	.+16     	; 0xb8e <fputc+0x38>
 b7e:	a0 81       	ld	r26, Z
 b80:	b1 81       	ldd	r27, Z+1	; 0x01
 b82:	9d 01       	movw	r18, r26
 b84:	2f 5f       	subi	r18, 0xFF	; 255
 b86:	3f 4f       	sbci	r19, 0xFF	; 255
 b88:	31 83       	std	Z+1, r19	; 0x01
 b8a:	20 83       	st	Z, r18
 b8c:	8c 93       	st	X, r24
 b8e:	26 81       	ldd	r18, Z+6	; 0x06
 b90:	37 81       	ldd	r19, Z+7	; 0x07
 b92:	2f 5f       	subi	r18, 0xFF	; 255
 b94:	3f 4f       	sbci	r19, 0xFF	; 255
 b96:	37 83       	std	Z+7, r19	; 0x07
 b98:	26 83       	std	Z+6, r18	; 0x06
 b9a:	14 c0       	rjmp	.+40     	; 0xbc4 <fputc+0x6e>
 b9c:	8b 01       	movw	r16, r22
 b9e:	ec 01       	movw	r28, r24
 ba0:	fb 01       	movw	r30, r22
 ba2:	00 84       	ldd	r0, Z+8	; 0x08
 ba4:	f1 85       	ldd	r31, Z+9	; 0x09
 ba6:	e0 2d       	mov	r30, r0
 ba8:	09 95       	icall
 baa:	89 2b       	or	r24, r25
 bac:	e1 f6       	brne	.-72     	; 0xb66 <fputc+0x10>
 bae:	d8 01       	movw	r26, r16
 bb0:	16 96       	adiw	r26, 0x06	; 6
 bb2:	8d 91       	ld	r24, X+
 bb4:	9c 91       	ld	r25, X
 bb6:	17 97       	sbiw	r26, 0x07	; 7
 bb8:	01 96       	adiw	r24, 0x01	; 1
 bba:	17 96       	adiw	r26, 0x07	; 7
 bbc:	9c 93       	st	X, r25
 bbe:	8e 93       	st	-X, r24
 bc0:	16 97       	sbiw	r26, 0x06	; 6
 bc2:	ce 01       	movw	r24, r28
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	08 95       	ret

00000bce <__ultoa_invert>:
 bce:	fa 01       	movw	r30, r20
 bd0:	aa 27       	eor	r26, r26
 bd2:	28 30       	cpi	r18, 0x08	; 8
 bd4:	51 f1       	breq	.+84     	; 0xc2a <__ultoa_invert+0x5c>
 bd6:	20 31       	cpi	r18, 0x10	; 16
 bd8:	81 f1       	breq	.+96     	; 0xc3a <__ultoa_invert+0x6c>
 bda:	e8 94       	clt
 bdc:	6f 93       	push	r22
 bde:	6e 7f       	andi	r22, 0xFE	; 254
 be0:	6e 5f       	subi	r22, 0xFE	; 254
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	af 4f       	sbci	r26, 0xFF	; 255
 bea:	b1 e0       	ldi	r27, 0x01	; 1
 bec:	3e d0       	rcall	.+124    	; 0xc6a <__ultoa_invert+0x9c>
 bee:	b4 e0       	ldi	r27, 0x04	; 4
 bf0:	3c d0       	rcall	.+120    	; 0xc6a <__ultoa_invert+0x9c>
 bf2:	67 0f       	add	r22, r23
 bf4:	78 1f       	adc	r23, r24
 bf6:	89 1f       	adc	r24, r25
 bf8:	9a 1f       	adc	r25, r26
 bfa:	a1 1d       	adc	r26, r1
 bfc:	68 0f       	add	r22, r24
 bfe:	79 1f       	adc	r23, r25
 c00:	8a 1f       	adc	r24, r26
 c02:	91 1d       	adc	r25, r1
 c04:	a1 1d       	adc	r26, r1
 c06:	6a 0f       	add	r22, r26
 c08:	71 1d       	adc	r23, r1
 c0a:	81 1d       	adc	r24, r1
 c0c:	91 1d       	adc	r25, r1
 c0e:	a1 1d       	adc	r26, r1
 c10:	20 d0       	rcall	.+64     	; 0xc52 <__ultoa_invert+0x84>
 c12:	09 f4       	brne	.+2      	; 0xc16 <__ultoa_invert+0x48>
 c14:	68 94       	set
 c16:	3f 91       	pop	r19
 c18:	2a e0       	ldi	r18, 0x0A	; 10
 c1a:	26 9f       	mul	r18, r22
 c1c:	11 24       	eor	r1, r1
 c1e:	30 19       	sub	r19, r0
 c20:	30 5d       	subi	r19, 0xD0	; 208
 c22:	31 93       	st	Z+, r19
 c24:	de f6       	brtc	.-74     	; 0xbdc <__ultoa_invert+0xe>
 c26:	cf 01       	movw	r24, r30
 c28:	08 95       	ret
 c2a:	46 2f       	mov	r20, r22
 c2c:	47 70       	andi	r20, 0x07	; 7
 c2e:	40 5d       	subi	r20, 0xD0	; 208
 c30:	41 93       	st	Z+, r20
 c32:	b3 e0       	ldi	r27, 0x03	; 3
 c34:	0f d0       	rcall	.+30     	; 0xc54 <__ultoa_invert+0x86>
 c36:	c9 f7       	brne	.-14     	; 0xc2a <__ultoa_invert+0x5c>
 c38:	f6 cf       	rjmp	.-20     	; 0xc26 <__ultoa_invert+0x58>
 c3a:	46 2f       	mov	r20, r22
 c3c:	4f 70       	andi	r20, 0x0F	; 15
 c3e:	40 5d       	subi	r20, 0xD0	; 208
 c40:	4a 33       	cpi	r20, 0x3A	; 58
 c42:	18 f0       	brcs	.+6      	; 0xc4a <__ultoa_invert+0x7c>
 c44:	49 5d       	subi	r20, 0xD9	; 217
 c46:	31 fd       	sbrc	r19, 1
 c48:	40 52       	subi	r20, 0x20	; 32
 c4a:	41 93       	st	Z+, r20
 c4c:	02 d0       	rcall	.+4      	; 0xc52 <__ultoa_invert+0x84>
 c4e:	a9 f7       	brne	.-22     	; 0xc3a <__ultoa_invert+0x6c>
 c50:	ea cf       	rjmp	.-44     	; 0xc26 <__ultoa_invert+0x58>
 c52:	b4 e0       	ldi	r27, 0x04	; 4
 c54:	a6 95       	lsr	r26
 c56:	97 95       	ror	r25
 c58:	87 95       	ror	r24
 c5a:	77 95       	ror	r23
 c5c:	67 95       	ror	r22
 c5e:	ba 95       	dec	r27
 c60:	c9 f7       	brne	.-14     	; 0xc54 <__ultoa_invert+0x86>
 c62:	00 97       	sbiw	r24, 0x00	; 0
 c64:	61 05       	cpc	r22, r1
 c66:	71 05       	cpc	r23, r1
 c68:	08 95       	ret
 c6a:	9b 01       	movw	r18, r22
 c6c:	ac 01       	movw	r20, r24
 c6e:	0a 2e       	mov	r0, r26
 c70:	06 94       	lsr	r0
 c72:	57 95       	ror	r21
 c74:	47 95       	ror	r20
 c76:	37 95       	ror	r19
 c78:	27 95       	ror	r18
 c7a:	ba 95       	dec	r27
 c7c:	c9 f7       	brne	.-14     	; 0xc70 <__ultoa_invert+0xa2>
 c7e:	62 0f       	add	r22, r18
 c80:	73 1f       	adc	r23, r19
 c82:	84 1f       	adc	r24, r20
 c84:	95 1f       	adc	r25, r21
 c86:	a0 1d       	adc	r26, r0
 c88:	08 95       	ret

00000c8a <__muluhisi3>:
 c8a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__umulhisi3>
 c8e:	a5 9f       	mul	r26, r21
 c90:	90 0d       	add	r25, r0
 c92:	b4 9f       	mul	r27, r20
 c94:	90 0d       	add	r25, r0
 c96:	a4 9f       	mul	r26, r20
 c98:	80 0d       	add	r24, r0
 c9a:	91 1d       	adc	r25, r1
 c9c:	11 24       	eor	r1, r1
 c9e:	08 95       	ret

00000ca0 <__mulshisi3>:
 ca0:	b7 ff       	sbrs	r27, 7
 ca2:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__muluhisi3>

00000ca6 <__mulohisi3>:
 ca6:	0e 94 45 06 	call	0xc8a	; 0xc8a <__muluhisi3>
 caa:	82 1b       	sub	r24, r18
 cac:	93 0b       	sbc	r25, r19
 cae:	08 95       	ret

00000cb0 <__prologue_saves__>:
 cb0:	2f 92       	push	r2
 cb2:	3f 92       	push	r3
 cb4:	4f 92       	push	r4
 cb6:	5f 92       	push	r5
 cb8:	6f 92       	push	r6
 cba:	7f 92       	push	r7
 cbc:	8f 92       	push	r8
 cbe:	9f 92       	push	r9
 cc0:	af 92       	push	r10
 cc2:	bf 92       	push	r11
 cc4:	cf 92       	push	r12
 cc6:	df 92       	push	r13
 cc8:	ef 92       	push	r14
 cca:	ff 92       	push	r15
 ccc:	0f 93       	push	r16
 cce:	1f 93       	push	r17
 cd0:	cf 93       	push	r28
 cd2:	df 93       	push	r29
 cd4:	cd b7       	in	r28, 0x3d	; 61
 cd6:	de b7       	in	r29, 0x3e	; 62
 cd8:	ca 1b       	sub	r28, r26
 cda:	db 0b       	sbc	r29, r27
 cdc:	0f b6       	in	r0, 0x3f	; 63
 cde:	f8 94       	cli
 ce0:	de bf       	out	0x3e, r29	; 62
 ce2:	0f be       	out	0x3f, r0	; 63
 ce4:	cd bf       	out	0x3d, r28	; 61
 ce6:	09 94       	ijmp

00000ce8 <__epilogue_restores__>:
 ce8:	2a 88       	ldd	r2, Y+18	; 0x12
 cea:	39 88       	ldd	r3, Y+17	; 0x11
 cec:	48 88       	ldd	r4, Y+16	; 0x10
 cee:	5f 84       	ldd	r5, Y+15	; 0x0f
 cf0:	6e 84       	ldd	r6, Y+14	; 0x0e
 cf2:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf4:	8c 84       	ldd	r8, Y+12	; 0x0c
 cf6:	9b 84       	ldd	r9, Y+11	; 0x0b
 cf8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cfa:	b9 84       	ldd	r11, Y+9	; 0x09
 cfc:	c8 84       	ldd	r12, Y+8	; 0x08
 cfe:	df 80       	ldd	r13, Y+7	; 0x07
 d00:	ee 80       	ldd	r14, Y+6	; 0x06
 d02:	fd 80       	ldd	r15, Y+5	; 0x05
 d04:	0c 81       	ldd	r16, Y+4	; 0x04
 d06:	1b 81       	ldd	r17, Y+3	; 0x03
 d08:	aa 81       	ldd	r26, Y+2	; 0x02
 d0a:	b9 81       	ldd	r27, Y+1	; 0x01
 d0c:	ce 0f       	add	r28, r30
 d0e:	d1 1d       	adc	r29, r1
 d10:	0f b6       	in	r0, 0x3f	; 63
 d12:	f8 94       	cli
 d14:	de bf       	out	0x3e, r29	; 62
 d16:	0f be       	out	0x3f, r0	; 63
 d18:	cd bf       	out	0x3d, r28	; 61
 d1a:	ed 01       	movw	r28, r26
 d1c:	08 95       	ret

00000d1e <__umulhisi3>:
 d1e:	a2 9f       	mul	r26, r18
 d20:	b0 01       	movw	r22, r0
 d22:	b3 9f       	mul	r27, r19
 d24:	c0 01       	movw	r24, r0
 d26:	a3 9f       	mul	r26, r19
 d28:	70 0d       	add	r23, r0
 d2a:	81 1d       	adc	r24, r1
 d2c:	11 24       	eor	r1, r1
 d2e:	91 1d       	adc	r25, r1
 d30:	b2 9f       	mul	r27, r18
 d32:	70 0d       	add	r23, r0
 d34:	81 1d       	adc	r24, r1
 d36:	11 24       	eor	r1, r1
 d38:	91 1d       	adc	r25, r1
 d3a:	08 95       	ret

00000d3c <_exit>:
 d3c:	f8 94       	cli

00000d3e <__stop_program>:
 d3e:	ff cf       	rjmp	.-2      	; 0xd3e <__stop_program>
